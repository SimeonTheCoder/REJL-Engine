#version 400 core

in float visibility;
in vec2 uvCoords;
in vec3 toCameraVector;

in vec3 fromLightVector[4];

out vec4 out_Color;

uniform vec3 skyColor;

uniform sampler2D reflection;
uniform sampler2D refraction;
uniform sampler2D dudv;
uniform sampler2D normal;

uniform vec3 lightColor[4];

uniform float time;

const float str = 0.03;

void main(void)
{
    vec2 uv = gl_FragCoord.xy / vec2(1920, -1080);

    vec2 disCoords = uvCoords * 20;
    disCoords += vec2(time, time);

    vec2 disCoords2 = uvCoords * 20;
    disCoords2 += vec2(time * .5, -time);

    vec2 refractTexCoords = vec2(uv.x, uv.y) + (texture(dudv, disCoords).r * 2 - 1) * str;
    vec2 reflectTexCoords = vec2(uv.x, uv.y) + (texture(dudv, disCoords).g * 2 - 1) * str;

    refractTexCoords += (texture(dudv, disCoords2).r * 2 - 1) * str;
    reflectTexCoords += (texture(dudv, disCoords2).g * 2 - 1) * str;

    reflectTexCoords.x = clamp(reflectTexCoords.x, 0.001, 0.999);
    reflectTexCoords.y = clamp(reflectTexCoords.y, -0.999, -0.001);

    vec4 reflectColor = texture(reflection, reflectTexCoords);
    vec4 refractColor = texture(refraction, refractTexCoords);

    vec4 normalColor = texture(normal, uvCoords * 30 + vec2((texture(dudv, disCoords).r * 2 - 1) * str, (texture(dudv, disCoords).g * 2 - 1) * str));
    vec3 normal = vec3((normalColor.r * 2 - 1) * 3, normalColor.b, (normalColor.g * 2 - 1) * 3);
    normal = normalize(normal);

    vec3 totalDiffuse = vec3(0.0, 0.0, 0.0);

    for(int i = 0; i < 4; i ++) {
        float global = 0.0;
        vec3 lColor = lightColor[i];

        if(lightColor[i].x < 0) {
            lColor = vec3(-lightColor[i].x, lightColor[i].y, lightColor[i].z);

            global = 1.0;
        }

        vec3 lightNormal = normalize(fromLightVector[i]);

        float nDot1 = dot(normal, lightNormal);
        float brightness = max(nDot1, 0);

        vec3 diffuse = brightness * lightColor[i];

        if(global < 0.5) {
            totalDiffuse = totalDiffuse + diffuse * (1 / length(-fromLightVector[i]) / length(-fromLightVector[i])) * 40;
        }else{
            totalDiffuse = totalDiffuse + diffuse;
        }
    }

    //out_Color = vec4(0, .5, 1, 0);
    totalDiffuse = vec3(max(0.4, totalDiffuse.x), max(0.4, totalDiffuse.y), max(0.4, totalDiffuse.z));
    out_Color = mix(refractColor, refractColor, 0) * vec4(totalDiffuse, 1.0);

    out_Color = mix(vec4(skyColor, 0.0), out_Color, visibility);
}