#version 400 core

in vec3 position;
in vec2 uv;
in vec3 normal;

out float visibility;
out vec2 uvCoords;
out vec3 toCameraVector;
out vec3 fromLightVector[4];

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

uniform vec3 cameraPos;
uniform vec3 lightPos[4];
uniform float time;

float fogDensity = .06;
float gradient = 1.5;

void main(void)
{
    uvCoords = uv;

    vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
    vec4 posRelativeToCamera = transformationMatrix * viewMatrix * vec4( position, 1.0 );

    gl_Position = projectionMatrix * posRelativeToCamera;
    gl_Position.y += sin(time * 3.14 / 5.0 + uv.x * 200 + time * 20) * .1;

    float distance = length(posRelativeToCamera.xyz);

    visibility = exp(-pow((distance * fogDensity), gradient));
    visibility = clamp(visibility, 0.0, 1.0);

    toCameraVector = cameraPos - worldPosition.xyz;

    for(int i = 0; i < 4; i ++) {
        fromLightVector[i] = worldPosition.xyz - lightPos[i];
    }
}